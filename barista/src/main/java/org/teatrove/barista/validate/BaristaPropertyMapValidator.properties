<optionalItems> = log&transactionQueue
log {
	<strict> = true
	enabled.<type> = Boolean
	enabled.<default> = true
	enabled.<desc> = "Flag indicating if logging is enabled"
	debug.<type> = Boolean
	debug.<default> = true
	debug.<desc> = "Flag indicating if debug messages should be reported"
	info.<type> = Boolean
	info.<default> = true
	info.<desc> = "Flag indicating if info messages should be reported"
	warn.<type> = Boolean
	warn.<default> = true
	warn.<desc> = "Flag indicating if warn messages should be reported"
	error.<type> = Boolean
	error.<default> = true
	error.<desc> = "Flag indicating if error messages should be reported"

	date.format.<default> = yyyy/MM/dd HH:mm:ss.SSS z
	directory.<default> = daily
	rollover.<choices> = daily&hourly
	rollover.<default> = daily
	rollover.<desc> = "The frequency of when the log file starts over."
}

# TransactionQueue properties.
transactionQueue {
	max.size.<type> = Number
	max.size.<min> = 0
	max.size.<max> = 1000
	max.size.<default> = 500
	max.size.<desc> = "Maximum backlog of connections before servicing raw HTTP 503 errors."

	# Maximum amount of threads performing initial HTTP
	# processing.
	max.threads.<type> = Number
	max.threads.<min> = 0
	max.threads.<max> = 1000
	max.threads.<default> = 250
	max.threads.<desc> = "Maximum amount of threads performing initial HTTP processing."

	# Timeout before queued transactions expire.
	timeout.transaction.<type> = Number
	timeout.transaction.<min> = 0
	timeout.transaction.<max> = 120000
	timeout.transaction.<default> = 60000
	timeout.transaction.<desc> = "Timeout before queued transactions expire."

	# TransactionQueue properties for new HTTP connections.
	new {
		max.size.<type> = Number
		max.size.<min> = 0
		max.size.<max> = 1000
		max.size.<default> = 500
		max.size.<desc> = "Maximum backlog of connections before servicing raw HTTP 503 errors."

		# Maximum amount of threads performing initial HTTP
		# processing.
		max.threads.<type> = Number
		max.threads.<min> = 0
		max.threads.<max> = 1000
		max.threads.<default> = 250
		max.threads.<desc> = "Maximum amount of threads performing initial HTTP processing."

		# Timeout before queued transactions expire.
		timeout.transaction.<type> = Number
		timeout.transaction.<min> = 0
		timeout.transaction.<max> = 120000
		timeout.transaction.<default> = 60000
		timeout.transaction.<desc> = "Timeout before queued transactions expire."
	}

	# TransactionQueue properties for persistent HTTP connections.
	persistent {
		max.size.<type> = Number
		max.size.<min> = 0
		max.size.<max> = 1000
		max.size.<default> = 500
		max.size.<desc> = "Maximum backlog of connections before servicing raw HTTP 503 errors."

		# Maximum amount of threads performing initial HTTP
		# processing.
		max.threads.<type> = Number
		max.threads.<min> = 0
		max.threads.<max> = 1000
		max.threads.<default> = 250
		max.threads.<desc> = "Maximum amount of threads performing initial HTTP processing."

		# Timeout before queued transactions expire.
		timeout.transaction.<type> = Number
		timeout.transaction.<min> = 0
		timeout.transaction.<max> = 120000
		timeout.transaction.<default> = 60000
		timeout.transaction.<desc> = "Timeout before queued transactions expire."
	}
}

threadPool {
	max.<type> = Number
	max.<min> = 0
	max.<default> = 500
	max.<unit> = threads
	max.<desc> = "The maximum number of threads."

	timeout.idle.<type> = Number
	timeout.idle.<min> = 0
	timeout.idle.<default> = 60000
	timeout.idle.<unit> = milliseconds
	timeout.idle.<desc> = "The number of milliseconds that need to pass before idle"

	timeout.<type> = Number
	timeout.<min> = 0
	timeout.<default> = 5000
	timeout.<unit> = milliseconds
	timeout.<desc> = "The number of milliseconds until the threadPool times out."
}
	
httpHandlers {
	<required> = true
	<subItem> = httpHandler

	httpHandler {
		type.<choices> = plain&secure
		type.<default> = plain
		type.<desc> = "The type of this httpHandler."
	
		socket {
			port.<type> = Number
			port.<min> = 0
			port.<max> = 65535
			port.<default> = 80
			port.<required> = true
			port.<desc> = "The port on which this httpHandler should listen"

			backlog.<type> = Number
			backlog.<min> = 0
			backlog.<default> = 200
			backlog.<desc> = "The maximum number of items that will be kept in the backlog"

			bind.<default> = 127.0.0.1
			bind.<desc> = "The IP number that this handler should bind to."

			timeout.read.new.<type> = Number
			timeout.read.new.<min> = 0
			timeout.read.new.<default> = 15000
			timeout.read.new.<unit> = milliseconds
			timeout.read.new.<desc> = "The timeout for new connections."

			timeout.read.persistent.<type> = Number
			timeout.read.persistent.<min> = 0
			timeout.read.persistent.<default> = 30000
			timeout.read.persistent.<unit> = milliseconds
			timeout.read.persistent.<desc> = "The timeout for persistent connections."

			buffer.write.<type> = Number
			buffer.write.<min> = 0
			buffer.write.<default> = 81920
			buffer.write.<unit> = bytes
			buffer.write.<desc> = "The size (in bytes) of the write buffer."

			buffer.read.<type> = Number
			buffer.read.<min> = 0
			buffer.read.<default> = 8192
			buffer.read.<unit> = bytes
			buffer.read.<desc> = "The size (in bytes) of the read buffer."
		}

		stages {
			<subItem> = stage

			stage {
				<strict> = true
				<rules> = class
				class.<required> = true
				init {
					<required> = false
				}
			}
		}
	}
}

servlets {
	<required> = true
	<subItem> = servlet

	servlet {
		<strict> = true
		<rules> = class
		class.<required> = true
		init {
			<required> = false
			<strict> = false
		}
		
		directory.root.<type> = String
	}
}

filters {
	<subItem> = filter

	filter {
		<strict> = true
		<rules> = class
		class.<required> = true
		init {
			<required> = no
		}
	}
}


# Set of ServletDispatchers to construct.
servletDispatchers {
	<required> = true
	<subItem> = servletDispatcher

	# Unique name given to this ServletDispatcher instance.
	servletDispatcher {
		# Patterns that map to servlets.
		servletMap {
			<required> = true
			<mappingItem> = servlet
		}

		# Patterns that map to filters.
		filterMap {
			<mappingItem> = filter
		}
	}
}