#
# Barista properties.
#

#HttpServer subMaps to the httpServer key thus it is commented out.
#httpServer {
    
    cluster.servers = string
   
    
    log {
        
        # If any child log is enabled, then this log is automatically enabled.
        enabled = boolean        

        # If any of these log properties are true, then the log is
        # automatically enabled.
        debug = boolean
        info = boolean
        warn = boolean
        error = boolean

        # Optionally change the date format in the log. Set to nothing to hide
        # the date altogether.        
        date.format = string

        # Optionally set the file directory to receive dated log files. If not
        # set, all log information goes to standard out.
        # Note: In production, logs shouldn't go on the "c:" drive, by WebOps
        # conventions.
        directory = string

        # Optionally set the log file rollover interval to be daily or hourly
        # if dated log files are enabled. By default, the rollover is daily.
        rollover = daily|hourly
    }    

    # ThreadPool properties.
    threadPool {
        
        # Maximum allowed number of threads in the pool
        max = int
        
        # Timeout (milliseconds) before idle threads exit
        timeout.idle = int
        
        # Timeout (milliseconds) for getting pooled threads or closing pool
        timeout = int
    }

    # ImpressionLog    
    hitlog.listener.classes = string


    servlets {      
        anyString {
        
            # Required servlet class        
            class = required$string


            # Optional logging parameters
            log {
                debug = boolean
                info = boolean
                warn = boolean
                error = boolean
            }
        
        }
    }
    
    servletDispatchers {

        anyString {
        
            session.strategy {                
                class = string
            }
            
            servletMap.freeTree

            error.forwarding.uri = string
            
            classpath = string
            
            transactionQueue {
                max.size = int
                max.threads = int
                timeout.transaction = int
                tune.threads = boolean
                tune.size = boolean
            }
        }
    }

    httpHandlers {

        anyString {

            log {
                enabled = boolean
                debug = boolean
                info = boolean
                warn = boolean
                error = boolean
            }

            type = required$plain|proxy|secure
          
            servlet.dispatcher = required$string
    
            socket {
                port = int
                bind = string
                factory = string                
                timeout.read.new = int
                timeout.read.persistent = int
                buffer.write = int
                buffer.read = int
           }
            

            transactionQueue {
            
                new {
                    max.size = int
                    max.threads = int
                    timeout.transaction = int
                    tune.threads = boolean
                    tune.size = boolean
                }

                persistent {
                    max.size = int
                    max.threads = int
                    timeout.transaction = int
                    tune.threads = boolean
                    tune.size = boolean
                }
            }
        }
    }
#}
