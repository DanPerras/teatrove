#
# Barista properties.
#

# Note: Names (quoted or unquoted) cannot contain any period characters ('.').

# Optional master properties, specified with a file name or URL.
#properties.master = http://master/config/master.properties

httpServer {
    # Log properties.
    #
    # If a child log doesn't explicitly specify any log properties, then the
    # parent's log properties are inherited.
    log {
        # If any child log is enabled, then this log is automatically enabled.
        enabled = true
        
        # If any of these log properties are true, then the log is
        # automatically enabled.
        debug = false
        info = true
        warn = true
        error = true

        # Optionally change the date format in the log. Set to nothing to hide
        # the date altogether.
        #date.format = yyyy/MM/dd HH:mm:ss.SSS z

        # Optionally set the file directory to receive dated log files. If not
        # set, all log information goes to standard out.
        # Note: In production, logs shouldn't go on the "c:" drive, by WebOps
        # conventions.
        directory = c:/logs/Barista

        # Optionally set the log file rollover interval to be daily or hourly
        # if dated log files are enabled. By default, the rollover is daily.
        #rollover = daily
    }

    # ThreadPool properties.
    threadPool {
        # Maximum allowed number of threads in the pool
        max = 500
        
        # Timeout (milliseconds) before idle threads exit
        timeout.idle = 60000
        
        # Timeout (milliseconds) for getting pooled threads or closing pool
        timeout = 5000
    }
    
    # Set of servlets to configure.
    servlets {
        # Sample servlet configuration
        #"AnyName" {
        #    # Required servlet class
        #    class = org.teatrove.barista.servlet.HelloWorld
        #
        #    # Optional initialization parameters
        #    init {
        #        name = value
        #    }
        #
        #    # Optional logging parameters
        #    log {
        #        debug = true
        #        info = true
        #        warn = true
        #        error = true
        #    }
        #
        #    # Optional root directory for servlets that read files
        #    directory.root = c:/wwwroot
        #}

        "Hello" {
            class = org.teatrove.barista.servlet.HelloWorld
        }
        
        "Tea" {
            class = org.teatrove.barista.servlet.TQTeaServlet

            init {
            
                #Servers in this cluster. Uncomment to enable cluster
                #administration. Use real machine names or IP adresses.
                #cluster.servers = server0,server1,server2
                
                # Path to the templates, separate multiple directories with a
                # semi-colon ';'.
                template.path = templates

                # Directory to write compiled templates to.
                template.classes = templates

                # Default template to serve if not fully specified.
                #template.default = Index
                
                # Maximum amount of logs to keep in memory for immediate
                # viewing from admin page.
                #log.max = 100

                log {
                    debug = false
                    info = false
                    warn = true
                    error = true
                }

                # The security key for the Admin pages.
                admin.key = magicKey
                admin.value = go

                # Application configuration (required).
                applications {
                    # Sample Application configuration
                    #"AnyName" {
                    #    # Required Application class
                    #    class = org.teatrove.barista.servlet.HelloWorld
                    #    
                    #    # Optional initialization parameters
                    #    init {
                    #        name = value
                    #    }
                    #    
                    #    # Optional logging parameters
                    #    log {
                    #        debug = true
                    #        info = true
                    #        warn = true
                    #        error = true
                    #    }
                    #}

                    "TeaServletAdmin" {
                        # Include TeaServlet administration support.
                        class = org.teatrove.teaservlet.AdminApplication
                    }

                    "BaristaAdmin" { 
                        # Include Barista administration support.
                        class = org.teatrove.barista.admin.BaristaAdminApplication
                    }
                }
            }
        }
        
        "wwwroot" {
            class = org.teatrove.barista.servlet.FileServlet
            init {
                # Note: In production, wwwroot shouldn't go on the "c:" drive,
                # by WebOps conventions.
                directory.root = c:/wwwroot
                directory.browse = false
                document.default = index.html
                mime.default = application/octet-stream
            }
        }
        
    }

    filters {
        # Configure in a filter for forwading errors to a custom page.
        "Error Forwarding" {
            class = org.teatrove.barista.http.ErrorForwardingFilter
            init {
                # All paths with errors will be forwarded here
                * = /dynamic/system/barista/HttpError
            }
        }
    }
    
    # Set of ServletDispatchers to construct.
    servletDispatchers {
        # Unique name given to this ServletDispatcher instance.
        "primary servlets" {
        
            # Session Strategy properties.
            session.strategy {

                # Uncomment to use the SWIDSessionStrategy              
                #class = org.teatrove.barista.http.SWIDSessionStrategy
                #init {
                # the values for cookie.name and cookie.age are the defaults
                #   cookie.name = SWID
                #   cookie.age = 630720000
                #   sessions = 1000
                #}

                class = org.teatrove.barista.http.BaristaSessionStrategy
                init {
                # the values for cookie.name and cookie.age are the defaults
                    cookie.name = Barista
                    cookie.age = -1
                    sessions = 1000
                }
            }
            
            # Patterns that map to servlets.
            servletMap {
                /hello = "Hello"
                /static/* = "wwwroot"
                /dynamic/* = "Tea"
            }

            # Patterns that map to filters.
            filterMap {
                # Uncomment to enable the error forwarding filter.
                #* = "Error Forwarding"
            }

            # Optional classpath to use for supporting servlet class reload.
            # Classes will be loaded from this classpath only if they are not
            # found in the system classpath.
            #classpath = servlets

            # Default TransactionQueue properties for all mapped servlets.
            transactionQueue {
                # Maximum backlog of requests per servlet before sending
                # HTTP 503 busy errors.
                max.size = 500
                    
                # Maximum amount of threads per servlet.
                max.threads = 400

                # Timeout before queued transactions expire.
                timeout.transaction = 60000
            }

            # Optional mappings from HTTP charset codes to character encodings.
            #charset.aliases {
            #    x-sjis = SJIS
            #    Shift_JIS = SJIS
            #    EUC_JP = EUC_JP
            #    x-euc-jp = EUC_JP
            #    UTF-8 = UTF8
            #}
        }
    }

    # Set of HTTP handlers to construct.
    httpHandlers {
        # Unique name given to this HTTP handler instance.
        "primary" {
            # Type of HTTP handler to construct: plain or secure.
            type = plain
    
            log {
                debug = false
            }

            socket {
                # Socket port to listen on for new HTTP requests.
                port = 80

                # Optional connection backlog.
                #backlog = 200
                
                # Optional local IP address to bind to.
                #bind = 127.0.0.1

                # Read timeout for new connections (milliseconds).
                timeout.read.new = 15000

                # Read timeout for persistent connections (milliseconds).
                timeout.read.persistent = 30000

                # Optional socket write buffer size.
                buffer.write = 81920

                # Optional socket read buffer size.
                #buffer.read = 8192
            }

            # Use the ServletDispatcher as defined earlier.
            servlet.dispatcher = "primary servlets"

            # Other special stages may be configured.
            stages {
                # Uncomment to enable ULF file logger.
                #"ULF logger" {
                #   class = org.teatrove.barista.http.ULFScribe
                #   init {
                #       serviceField = "go"
                #       directory = hits
                #   }
                #}

                # Uncomment to enable database hit logger.
                #"DB logger" {
                #   class = org.teatrove.barista.http.DatabaseScribe
                #   init {
                #       driver = weblogic.jdbc.mssqlserver4.Driver
                #       url = jdbc:weblogic:mssqlserver4:pubtest2
                #       info {
                #           server = <db server>
                #           db = <db name>
                #           user = <db user>
                #           password = <db password>
                #       }
                #
                #       min_connections = 1
                #       max_connections = 100
                #   }
                #}
            }

            # TransactionQueue properties.
            transactionQueue {
                # TransactionQueue properties for new HTTP connections.
                new {
                    # Maximum backlog of connections before servicing raw
                    # HTTP 503 errors.
                    max.size = 500

                    # Maximum amount of threads performing initial HTTP
                    # processing.
                    max.threads = 250

                    # Timeout before queued transactions expire.
                    timeout.transaction = 60000
                }

                # TransactionQueue properties for persistent HTTP connections.
                persistent {
                    # Maximum backlog of persistent connections before
                    # closing persistent connections.
                    max.size = 200

                    # Maximum amount of threads waiting for requests from
                    # persistent connections.
                    max.threads = 500

                    # Timeout before queued transactions expire.
                    timeout.transaction = 60000
                }
            }
        }
    }
}
