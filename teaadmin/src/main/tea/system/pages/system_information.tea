<% template system_information (Map config)

/*

TODO:
- cleanup handling of tooltip
- sortable threads
- use timelapse view for threads (name, pie chart [user, cpu, block, wait], graph)
- thread stacktrace and refresh
- timeouts when offline to show not connected
- move scripts to script core

    
*/


    admin = getTeaServletAdmin();
    
    pathPrefix = call system.util.getPathPrefix();
    
    request = getRequest();
    
    call system.util.handleRequest(request);

    nullFormat("None");

    classLoadingMXBean = getClassLoadingMXBean();
    compilationMXBean = getCompilationMXBean();
    garbageCollectorMXBean = getGarbageCollectorMXBeans();
    memoryManagerMXBean = getMemoryManagerMXBeans();
    memoryMXBean = getMemoryMXBean();
    memoryPoolMXBean = getMemoryPoolMXBeans();
    operatingSystemMXBean = getOperatingSystemMXBean();
    platformMBeanServer = getPlatformMBeanServer();
    runtimeMXBean = getRuntimeMXBean();
    threadMXBean = getThreadMXBean();

    tab = request.parameters['tab'] ?: 'overview'
%>

<article>
    <section id="system-info-container">
        <div class="controls">
            <div class="controls-wrapper">
                <div id="loadingIndicator"></div>
                <div id="buttonset-tabs" class="buttonset" style="width:100%;">
                    <input type="radio" id="tabs_overview" name="radio" value="overview" <% tab == 'overview' ? 'checked="checked"' : '' %> /><label for="tabs_overview">Overview</label>
                    <input type="radio" id="tabs_memory" name="radio" value="memory" <% tab == 'memory' ? 'checked="checked"' : '' %> /><label for="tabs_memory">Memory</label>
                    <input type="radio" id="tabs_threads" name="radio" value="threads" <% tab == 'threads' ? 'checked="checked"' : '' %> /><label for="tabs_threads">Threads</label>
                    <input type="radio" id="tabs_mbeans" name="radio" value="mbeans" <% tab == 'mbeans' ? 'checked="checked"' : '' %> /><label for="tabs_mbeans">MBeans</label>
                    <input type="radio" id="tabs_info" name="radio" value="info" <% tab == 'info' ? 'checked="checked"' : '' %> /><label for="tabs_info">Information</label>
                </div>
            </div>
        </div>
        <br class="clear" /><br />
        
        <div id="system-info-summary">
            <div class="quick-summary">
                <%
                    unitLabel = 'MB'
                    unitDividend = 1024 * 1024;
                    numberFormat("0");
                %>
                
                <% freeMemory = (memoryMXBean.heapMemoryUsage.max - memoryMXBean.heapMemoryUsage.used) / unitDividend; %>
                <div class="metric">
                    <div id="freeHeapMemory">
                        <div class="value"><span class="number"><% freeMemory %></span> <% unitLabel %></div>
                        <div class="label">Free Heap Memory</div>
                    </div>
                </div>
                
                <% usedMemory = memoryMXBean.heapMemoryUsage.used / unitDividend; %>
                <div class="metric">
                    <div id="usedHeapMemory">
                        <div class="value"><span class="number"><% usedMemory %></span> <% unitLabel %></div>
                        <div class="label">Used Heap Memory</div>
                    </div>
                </div>
                
                <% totalMemory = memoryMXBean.heapMemoryUsage.max / unitDividend; %>
                <div class="metric">
                    <div id="totalHeapMemory">
                        <div class="value"><span class="number"><% totalMemory %></span> <% unitLabel %></div>
                        <div class="label">Total Heap Memory</div>
                    </div>
                </div>
                
                <div class="separator">&nbsp;</div>
                
                <% freeMemory = (memoryMXBean.nonHeapMemoryUsage.max - memoryMXBean.nonHeapMemoryUsage.used) / unitDividend; %>
                <div class="metric">
                    <div id="freeNonHeapMemory">
                        <div class="value"><span class="number"><% freeMemory %></span> <% unitLabel %></div>
                        <div class="label">Free Non-Heap Memory</div>
                    </div>
                </div>
                
                <% usedMemory = memoryMXBean.nonHeapMemoryUsage.used / unitDividend; %>
                <div class="metric">
                    <div id="usedNonHeapMemory">
                        <div class="value"><span class="number"><% usedMemory %></span> <% unitLabel %></div>
                        <div class="label">Used Non-Heap Memory</div>
                    </div>
                </div>
                
                <% totalMemory = memoryMXBean.nonHeapMemoryUsage.max / unitDividend; %>
                <div class="metric">
                    <div id="totalNonHeapMemory">
                        <div class="value"><span class="number"><% totalMemory %></span> <% unitLabel %></div>
                        <div class="label">Total Non-Heap Memory</div>
                    </div>
                </div>
                
                <br class="clear" />
            </div>
        </div>
    </section>
    
    <div id="system-info-overview" class="system-info-tab <% tab == 'overview' ? 'ui-active' : '' %>" style="display: <% tab == 'overview' ? 'block' : 'none' %>;">
        <% call system.format.getSystemInfoOverview(); %>
    </div>
    <div id="system-info-memory" class="system-info-tab <% tab == 'memory' ? 'ui-active' : '' %>" style="display: <% tab == 'memory' ? 'block' : 'none' %>;">
        <% call system.format.getSystemInfoMemory(); %>
    </div>
    <div id="system-info-threads" class="system-info-tab <% tab == 'threads' ? 'ui-active' : '' %>" style="display: <% tab == 'threads' ? 'block' : 'none' %>;">
        <% call system.format.getSystemInfoThreads(); %>
    </div>
    <div id="system-info-mbeans" class="system-info-tab <% tab == 'mbeans' ? 'ui-active' : '' %>" style="display: <% tab == 'mbeans' ? 'block' : 'none' %>;">
        <% call system.format.getSystemInfoMBeans(); %>
    </div>
    <div id="system-info-info" class="system-info-tab <% tab == 'info' ? 'ui-active' : '' %>" style="display: <% tab == 'info' ? 'block' : 'none' %>;">
        <% call system.format.getSystemInfo(); %>
    </div>
</article>
        
<script type="text/javascript">
    var MAX_POINTS = 100;
    var INTERVAL = 2000;

    function initPlot($container, data, options) {
        var plot = $.plot($container, data, options);
        $container.data('plot', plot);

        var previous = null;
        $container.bind("mouseout", function() {
            previous = null;
            hideTooltip();
            
            plot.clearCrosshair();
            $container.data('plothover', null);
        });
        
        $container.bind("plothover", function(event, pos, item) {
            var axes = plot.getAxes();
            if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max ||
                pos.y < axes.yaxis.min || pos.y > axes.yaxis.max) {
                return;
            }
    
            var contents = '';
            var datapoint = null;
            var i, j, dataset = plot.getData();
            for (i = 0; i < dataset.length; i++) {
                var series = dataset[i];
    
                // find the nearest points, x-wise
                for (j = 0; j < series.data.length; j++) {
                    if (series.data[j][0] > pos.x) {
                        break;
                    }
                }
                
                // now interpolate
                var p, p1 = series.data[j - 1], 
                       p2 = series.data[j];

                if (p1 == null && p2 == null) { p = null; }
                else if (p1 == null) { p = p2[1]; }
                else if (p2 == null) { p = p1[1]; }
                else if (Math.abs(p1[0] - pos.x) < 
                         Math.abs(p2[0] - pos.x)) {
                    p = p1;
                }
                else { p = p2; }
                
                datapoint = p;
                if (p != null) {
                    if (contents.length == 0) {
                        contents += axes.xaxis.tickFormatter(p[0], axes.xaxis) + '<br /><br />';
                    }
                    
                    contents += series.label + ": " + axes.yaxis.tickFormatter(p[1], axes.yaxis) + '<br />';
                }
            }
            
            if (datapoint != null) {
                var poffset = $container.offset();
                var offset = plot.pointOffset({ x: datapoint[0], y: 0 });
                
                $container.data('plothover', [ pos, item ]);
                showTooltip(poffset.left + offset.left, pos.pageY, contents, $container);
                plot.lockCrosshair({ x: datapoint[0] });
            }
        });
    }
    
    function formatDuration(time) {
        var result = '';
        
        var days = (1000.0 * 60.0 * 60.0 * 24.0);
        var value = Math.floor(time / days);
        var time = time % days;
        if (value > 0) { result += value.toFixed(0) + 'd '; }

        var hours = (1000.0 * 60.0 * 60.0);
        value = Math.floor(time / hours);
        time = time % hours;
        if (value > 0) { result += value.toFixed(0) + 'h '; }
        
        minutes = (1000.0 * 60.0);
        value = Math.floor(time / minutes);
        time = time % minutes;
        if (value > 0) { result += value.toFixed(0) + 'm '; }
        
        seconds = (1000.0);
        value = Math.floor(time / seconds);
        time = time % seconds;
        if (value > 0) { result += value.toFixed(0) + 's '; }
        
        if (result.length == 0) {
            result = time + ' ms';
        }
        
        return result;
    }
    
    function initChart($container, type, formatter, callback) {
        var options = {
            series: {
                bars: { show: (type == 'bar'), fill: true },
                lines: { show: (type == 'line'), fill: false },
                points: { show: false }
            },
            grid: {
                hoverable: true,
                clickable: true,
                autoHighlight: false
            },
            legend: { show: false },
            crosshair: { mode: "x" },
            xaxis: { 
                show: true, 
                mode: (type == 'line' ? 'time' : ''),
                twelveHourClock: true 
            },
            yaxis: { 
                show: true, 
                min: 0, 
                tickFormatter: formatter 
            },
        };
        
        if (callback) {
            callback(options);
        }

        var data = [ ], handlers = [ ];
        for (var i = 4; i < arguments.length; i += 2) {
            handlers.push(arguments[i + 1]);
            
            var series = null;
            if (typeof arguments[i] == 'object') {
                series = arguments[i];
                series.data = [];
            }
            else {
                series = { label: arguments[i], data: [] };
            }
            
            data.push(series);
        }

        $container.data('plot', null);
        $container.data('plotdata', data);
        $container.data('plothandlers', handlers);
        $container.data('plotoptions', options);
        $container.addClass('graph');
    }

    var dataListeners = [];
    function addDataListener(listener) {
        dataListeners.push(listener);
    }

    addDataListener(function(json) {
        var usedHeapMemory = json.memory.heap.used / 1024 / 1024;
        var maxHeapMemory = json.memory.heap.max / 1024 / 1024;
        var freeHeapMemory = maxHeapMemory - usedHeapMemory;
        $('#freeHeapMemory .value .number').text(freeHeapMemory.toFixed(0));
        $('#usedHeapMemory .value .number').text(usedHeapMemory.toFixed(0));
        $('#totalHeapMemory .value .number').text(maxHeapMemory.toFixed(0));
    
        var usedNonHeapMemory = json.memory.nonheap.used / 1024 / 1024;
        var maxNonHeapMemory = json.memory.nonheap.max / 1024 / 1024;
        var freeNonHeapMemory = maxNonHeapMemory - usedNonHeapMemory;
        $('#freeNonHeapMemory .value .number').text(freeNonHeapMemory.toFixed(0));
        $('#usedNonHeapMemory .value .number').text(usedNonHeapMemory.toFixed(0));
        $('#totalNonHeapMemory .value .number').text(maxNonHeapMemory.toFixed(0));
    });
    
    addDataListener(function(json) {
        $('.graph').each(function(idx) {
            var $this = $(this),
                plot = $this.data('plot'),
                data = $this.data('plotdata'),
                handlers = $this.data('plothandlers'),
                options = $this.data('plotoptions');
            
            for (var i = 0; i < handlers.length; i++) {
                var point = handlers[i](json);
                if (point === null) { continue; }
                
                if (!$.isArray(point)) {
                    point = [ json.timestamp, point ];
                }
                
                if ($.isArray(point[0])) {
                    for (var j = 0; j < point.length; j++) {
                        data[i].data.push(point[j]);
                    }
                }
                else {
                    if (options.series.bars.show) {
                        data[i].data = [ point ];
                    }
                    else {
                        data[i].data.push(point);
                    }
                }
                
                if (data[i].data.length > MAX_POINTS) {
                    // TODO: aggregate data over time period
                    data[i].data.shift();
                }
            }
            
            if (!plot) {
                if (!$this.is(':visible')) { return; }
                plot = initPlot($this, data, options);
            }
            else {
                plot.setData(data);
                if ($this.is(':visible')) {
                    plot.resize();
                }
                
                plot.setupGrid();
                plot.draw();
                plot.clearCrosshair();
            }
            
            var plothover = $this.data('plothover');
            if (plothover) {
                $this.trigger('plothover', plothover[0], plothover[1]);
            }
        });
    });
    
    setInterval(
        function() {
            $.get('<% pathPrefix %>system/remote/jmx', function(json) {
                for (var i = 0; i < dataListeners.length; i++) {
                    dataListeners[i](json);
                }
            });
        },
        1000
    );
    
    function hideTooltip() {
        $('#tooltip').fadeOut(200);
    }
    
    function showTooltip (x, y, contents, container) {
        var $tooltip = $('#tooltip');
        if ($tooltip.length == 0) {
            $tooltip = 
                $('<div id="tooltip"></div>')
                    .css({
                        position: 'absolute',
                        display: 'none',
                        border: '1px solid #fdd',
                        padding: '5px',
                        'background-color': '#000',
                        color: '#FFF',
                        opacity: 0.80,
                        'z-index': 9999,
                        'font-size': '12px',
                        'border-radius': '3px'
                    }
                ).appendTo("body");
                
            $tooltip.css({visibility: 'hidden'})
                .html(contents);
        }
        else {
            $tooltip.html(contents);
        }

        var left = x, top = y,
            coffset = container.offset(),
            cwidth = container.width(), 
            cheight = container.height(),
            twidth = $tooltip.width(),
            theight = $tooltip.height();
            
        // to the right first
        if (left + twidth + 15 < coffset.left + cwidth) {
            left = left + 15;
        }
        
        // to the left last
        else { left = left - twidth - 15; }

        // to above first
        if (top - theight - 15 > coffset.top) {
            top = top - theight - 15;
        }
        
        // to bottom last
        else { top = top + 15; }

        $tooltip.html(contents)
                .css({'left': left + 'px', top: top + 'px', visibility: 'visible' })
                .fadeIn(200);
                
        $(window).resize(function() {
            $('.graph').each(function() {
                var $this = $(this);
                if ($this.is(":visible")) {
                    var plot = $this.data('plot');
                    if (plot) { plot.resize(); }
                }
            });
        });
    };
</script>
