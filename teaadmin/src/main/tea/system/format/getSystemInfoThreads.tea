<% template getSystemInfoThreads()

/*

TODO:
- consider adding a gap when time way out of bounds (more than a few secs)?
- move margin, padding, border, float styles to separate gridlapse in core
- IE support, FF, etc
- show threads that have expired and dynamically add new threads

- add user time / cpu time / wait time / block time
- on hover row show stacktrace button 
- add title for name of thread 
- add stacktrace dialog

*/

    request = getRequest();
    
    threadMXBean = getThreadMXBean();
    threads = threadMXBean.getThreadInfo(threadMXBean.allThreadIds, true, true)

    currentTime = currentDateTime().millis

%>

<section>
    <div class="gridlapse">
    <div class="grid-container">
        <div class="grid-lhn">
        <%
            numberFormat('0');
            foreach (idx in 0..threads.length - 1) { 
                thread = threads[idx];
                state = thread.threadState.ordinal()
                
                if (idx % 10 == 0) 
                {
        %>
                    <div class="header stathead">
                        <div class="template">&nbsp;</div>
                    </div>
        <%
                }
        %>
                <div class="row stathead" style="height: 24px;">
                    <div class="template" title="">
                        <a href="">
                            <% thread.threadName %>
                        </a>
                    </div>
                </div>        
        <% 
            } 
        %>
            <div class="placeholder stathead">&nbsp;</div>
        </div>
        
        <div class="grid">
        <%
            header = 0;
            foreach (idx in 0..threads.length - 1) {
                if (idx % 10 == 0) 
                {
                    header = header + 1
        %>
                    <div id="header-<% header %>" class="header stathead"></div>
                    <div class="scrollbar">
                        <div class="scroller">|||</div>
                    </div>
        <% 
                }
        %>
                 
            <div id="row-<% threads[idx].threadId %>" class="row" style="height: 24px;">
            </div>
        
        <%
            }
        %>
            
            <div class="scrollbar">
                <div class="scroller">|||</div>
            </div>
                    
        </div>
    </div>
    
    <br class="clear" />
            
    </div>
</section>

<script type="text/javascript">
    $(function() {
        var MAX_DIFFERENTIAL = 5000, 
            COLORS = [ 'black', 'green', 'red', 'yellow', 'yellow', 'white' ];
        
        var lastTimestamp = -1,
            $grid = $('.grid'), 
            $headers = $grid.find('.header');
            $rows = $grid.find('.row');
            
        addDataListener(function(json) {
            // calculate time differential and insert break if outstanding
            var timestamp = json.timestamp;
            if (timestamp - json.timestamp > MAX_DIFFERENTIAL) {
                insertBreak();
            }
            
            // insert regular metrics per thread
            insertMetrics(json);
        });
        
        function insertBreak() {
            var rowWidth = -1;
            $headers.each(function() {
                var $header = $(this);
                if (rowWidth < 0) {
                    var $metrics = $header.children('.metric');
                    var twidth = ($metrics.length + 1) * 106;
                    rowWidth = Math.max($grid.width(), twidth);
                }
                
                $header.css('width', rowWidth + 'px');

                var $metric = $('<div class="metric" style="position: relative !important; border-left: 1px solid white; float: left; left: -100px; width: 100px; background-color: white; text-align: center;"> ||| </div>');
                $header.prepend($metric);
            });
            
            // move previous metrics in each row
            $rows.each(function() {
                var $row = $(this), width = $row.width();
                $row.css('width', rowWidth + 'px');
                
                var $metric = $('<div class="white" style="float: left; position: relative !important; margin-left: 1px; width: 103px; top: 2px;"><span class="value">&nbsp;</span></div>'); 
                $row.prepend($metric);
            });
        }
        
        function insertMetrics(json) {
            var time = json.time;
                    
            // insert time frame into each header
            var rowWidth = -1;
            $headers.each(function() {
                var $header = $(this);
                if (rowWidth < 0) {
                    var $metrics = $header.children('.metric');
                    var twidth = ($metrics.length + 1) * 106;
                    rowWidth = Math.max($grid.width(), twidth);
                }
                
                $header.css('width', rowWidth + 'px');

                var $metric = $('<div class="metric" style="position: relative !important; border-left: 1px solid white; float: left; left: -100px; width: 0px;">' + time + '</div>');
                $header.prepend($metric);
                $metric.animate({'left' : '0px', 'width' : '100px' });
            });
            
            // move previous metrics in each row
            $rows.each(function() {
                var $row = $(this), width = $row.width();
                $row.css('width', rowWidth + 'px');
            });

            // reinitialize the grid and scrollbars
            var gridlapse = $grid.data('gridlapse');
            gridlapse.initialize();
            
            // insert row per thread
            for (var i = 0; i < json.threads.threads.length; i++) {
                var thread = json.threads.threads[i];
                if (!thread || thread.id < 0) { continue; }
                
                var $row = $('#row-' + thread.id);
                if ($row.length) {
                    var clazz = 'metric process ' + COLORS[thread.state];
                    
                    var $metric = $('<div class="' + clazz + '" style="float: left; position: relative !important; margin-left: 1px; width: 0px; top: 2px;"><span class="value">&nbsp;</span></div>'); 
                    $row.prepend($metric);
                    $metric.animate({ 'width' : '103px' });
                }
            }
        }
    });

</script>
