<% template getSystemInfoThreads()

/*

TODO:
- better handle offset based on timestamp in json
- add user time / cpu time / wait time / block time
- add buttons for zooming, sorting, etc
- on hover row show stacktrace button 
- add title for name of thread 
- add stacktrace dialog

*/

    request = getRequest();
    
    threadMXBean = getThreadMXBean();
    threads = threadMXBean.getThreadInfo(threadMXBean.allThreadIds, true, true)

    currentTime = currentDateTime().millis

    pxps = convertStringToInteger(request.parameters['pxps'] ?: '-1')
    zoom = convertStringToInteger(request.parameters['zoom'] ?: '1')
    if (pxps <= 0) {
        pxps = zoom == 0 ? 25 : (zoom * 100)
    }

    timeframe = convertStringToInteger(request.parameters['timeframe'] ?: '1')
    timeframeSEC = timeframe * 60
    timeframeMSEC = timeframeSEC * 1000
    
    endTime = currentTime - timeframeMSEC

    MEDIUM_THRESHOLD = 500
    HIGH_THRESHOLD = 1000

    PX_PER_SEC = pxps ?: 100
    PX_PER_MSEC = PX_PER_SEC / 1000.0

%>

<section>
    <div class="gridlapse">
    <div class="grid-container">
        <div class="grid-lhn">
        <%
            numberFormat('0');
            // new = black, run = green, blocked = red, waiting =yellow, timed wait = yellow, terminated = white 
            colors = #( 'black', 'green', 'red', 'yellow', 'yellow', 'white' );
            foreach (idx in 0..threads.length - 1) { 
                thread = threads[idx];
                state = thread.threadState.ordinal()
                
                if (idx % 10 == 0) 
                {
        %>
                    <div class="header stathead">
                        <div class="template">&nbsp;</div>
                    </div>
        <%
                }
        %>
                <div class="row stathead" style="height: 24px;">
                    <div class="template" title="">
                        <a href="">
                            <% thread.threadName %>
                        </a>
                    </div>
                </div>        
        <% 
            } 
        %>
            <div class="placeholder stathead">&nbsp;</div>
        </div>
        
        <div class="grid">
        <%
            header = 0;
            foreach (idx in 0..threads.length - 1) {
                if (idx % 10 == 0) 
                {
                    header = header + 1
        %>
                    <div id="header-<% header %>" class="header stathead" style="width:<% timeframeSEC * PX_PER_SEC %>px;">
                        <div class="timer">&nbsp;</div>
                        <% foreach (i in 1..(timeframeSEC - 1)) { %>
                            <div class="metric" style="left: <% i * PX_PER_SEC %>px; width: <% PX_PER_SEC %>px;">
                                <% i %>s
                            </div>
                        <% } %>
                    </div>
                    <div class="scrollbar" style="width: <% timeframeSEC * PX_PER_SEC %>px;">
                        <div class="scroller">|||</div>
                    </div>
        <% 
                }
        %>
                 
            <div id="row-<% threads[idx].threadId %>" class="row" style="height: 24px; width: <% timeframeSEC * PX_PER_SEC %>px;">
            </div>
        
        <%
            }
        %>
            
            <div class="scrollbar" style="width: <% timeframeSEC * PX_PER_SEC %>px;">
                <div class="scroller">|||</div>
            </div>
                    
        </div>
    </div>
    
    <br class="clear" />
            
    <div class="grid-tracker"></div>
    </div>
            
    </div>
</section>

<script type="text/javascript">
    PX_PER_SEC = <% PX_PER_SEC %>;
    
    var colors = [ 'black', 'green', 'red', 'yellow', 'yellow', 'white' ];

    $(function() {
        var $grid = $('.grid'), 
            $headers = $grid.find('.header');
            $rows = $grid.find('.row');
            
        addDataListener(function(json) {
        
            // insert time frame into each header
            var extend = false;
            $headers.each(function() {
                var $header = $(this);
                var $metrics = $header.children('.metric');
                if ($metrics.length < 60) { 
                    extend = true;
                    $header.css('width', ($header.width() + PX_PER_SEC) + 'px');
                }
                else {
                    $($metrics[$metrics.length - 1]).remove();
                }
                 
                $metrics.each(function(idx) {
                    var $metric = $(this);
                    $metric.css('left', ($metric.position().left + PX_PER_SEC) + 'px')
                           .text((idx + 2) + 's');
                });
                $header.prepend('<div class="metric" style="left: ' + PX_PER_SEC + 'px; width: ' + PX_PER_SEC + 'px;">1s</div>');
            });
            
            // move previous metrics in each row
            $rows.each(function() {
                var $row = $(this), width= $row.width();
                if (extend) {
                    $row.css('width', (width + PX_PER_SEC) + 'px');
                }
                
                $row.children('.metric').each(function() {
                    var $metric = $(this);
                    
                    var left = $metric.position().left + PX_PER_SEC;
                    if (left > width) { $metric.remove(); }
                    else { $metric.css('left', left + 'px'); }
                });
            });

            // reinitialize the grid and scrollbars
            var gridlapse = $grid.data('gridlapse');
            gridlapse.initialize();
            
            // insert row per thread
            for (var i = 0; i < json.threads.threads.length; i++) {
                var thread = json.threads.threads[i];
                if (!thread || thread.id < 0) { continue; }
                
                var $row = $('#row-' + thread.id);
                if ($row.length) {
                    var clazz = 'metric process ' + colors[thread.state];
                    
                    var $metrics = $row.children('.metric');
                    if ($metrics.length > 0 && $metrics[0].className == clazz) {
                        var $metric = $($metrics[0]); 
                        var width = Math.min($metric.width() + PX_PER_SEC, $row.width() - 2);
                        $metric.css({ left : '2px', width: width + 'px' });  
                    }
                    else {
                        $row.prepend('<div class="' + clazz + '" style="left: 2px; width: <% 250 * PX_PER_MSEC %>px; top: 2px;"><span class="value">&nbsp;</span></div>');
                    }
                }
            }
        });
        
        // TODO: add horizontal padding for extinquished threads and hilite 
    });

</script>
